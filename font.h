#ifndef MY_FONT_H
#define MY_FONT_H

#include <iostream>
#include <GLFW/glfw3.h>
#include <GL/gl.h>

// from 32 to 122
//  !"#$%&'()*+,-./
// 0123456789
// :;<=>?@
// ABCDEFGHIJKLMNOPQRSTUVWXYZ
// [\]^_`
// abcdefghijklmnopqrstuvwxyz
const int _fc = 32;
const int _lc = 122;
const int _cw = 5;
const int _ch = 7;
const char* _f_chars = "\
00000000000000000000000000000000000\
00100001000010000100001000000000100\
01010010100000000000000000000000000\
01010010101111101010111110101001010\
00100011111010001110001010111000100\
11001110010001000100010001001110011\
01110100011000101010011011001101111\
00100001000000000000000000000000000\
00010001000100001000010000010000010\
01000001000001000010000100010001000\
00100101010111011111011101010100100\
00000000000010001110001000000000000\
00000000000000000000000000010001000\
00000000000000001110000000000000000\
00000000000000000000000000010000000\
00001000010001000100010001000010000\
\
01110100111010110101101011100101110\
00100011001010000100001000010011111\
01110100010000100010001000100011111\
11111000100010001110000010000111110\
00010001100101010010100101111100010\
11111100001000011110000010000111110\
01110100001000011110100011000101110\
11111000010001000100010000100001000\
01110100011000101110100011000101110\
01110100011000101111000010000101110\
\
00000000000010000000000000010000000\
00000000000010000000000000010001000\
00000000110110010000011000001100000\
00000000001111100000111110000000000\
00000110000011000001001101100000000\
01110100010000100010001000000000100\
01110100011011110101101101000001111\
\
00100010100101010001111111000110001\
11110100011000111110100011000111110\
01111100001000010000100001000001111\
11110100011000110001100011000111110\
11111100001000011100100001000011111\
11111100001000011100100001000010000\
01111100001000010011100011000101111\
10001100011000111111100011000110001\
01110001000010000100001000010001110\
00001000010000100001100011000101110\
10001100101010011000101001001010001\
10000100001000010000100001000011111\
10001110111010110001100011000110001\
10001110011010110011100011000110001\
01110100011000110001100011000101110\
11110100011000111110100001000010000\
01110100011000110001100011001101111\
11110100011000111110100011000110001\
01111100001000001110000010000111110\
11111001000010000100001000010000100\
10001100011000110001100011000101110\
10001100011000110001010100101000100\
10001100011000110001101011101110001\
10001100010101000100010101000110001\
10001100010101000100001000010000100\
11111000010001000100010001000011111\
\
01110010000100001000010000100001110\
10000100000100000100000100000100001\
01110000100001000010000100001001110\
00100010101000100000000000000000000\
00000000000000000000000000000011111\
00100000100000100000000000000000000\
\
00000011100000101111100010111100000\
00000100001000011110100011111000000\
00000011111000010000100000111100000\
00000000010111110001100010111100000\
00000011101000111111100000111100000\
00011001000100011110010000100000000\
00000000000111110001011110000101110\
00000100001000011110100011000100000\
00100000000010000100001000010000000\
00100000000010000100001001010001000\
10000100101001011100100101000100000\
01000010000100001000010000011000000\
00000110101010110101101011010100000\
00000111001001010010100101001000000\
00000011101000110001100010111000000\
00000111101000110001111101000010000\
00000011111000110001011110000100001\
00000101111100010000100001000000000\
00000011111000001110000011111000000\
00000001001111100100001010001000000\
00000100011000110001100110110100000\
00000100011000101010010100010000000\
10001100011000110001101011101110001\
10001100010101000100010101000110001\
10001100010101000100001000010000100\
11111000010001000100010001000011111\
";


const char* _empty = "\
00000\
00000\
00000\
00000\
00000\
00000\
00000\
";

int _gtopline = 0;
int _gbottomline = 0;

float _pf_pixelsize = 1.0f;
float _pf_dspx = 640.0f;
float _pf_dspy = 480.0f;

void pfResetTop()
{
	_gtopline = 0;
}

void pfPixelSize(float ps)
{
	_pf_pixelsize = ps;
}

void pfDisplaySize(float dw, float dh)
{
	_pf_dspx = dw;
	_pf_dspy = dh;
}

void pfText(const std::string& i_text, bool selected)
{
	float stepx = 2.0f * _pf_pixelsize / _pf_dspx;
	float stepy = 2.0f * _pf_pixelsize / _pf_dspy;
	// start 1-char away from left-side
	float currx = -1.0f + stepx * _cw;
	// start 1-char away from top-side and from last top-line
	float curry = 1.0 - 2.0f * stepy * _ch - _gtopline * stepy * (_ch + 1);

	glPointSize(_pf_pixelsize);
	glBegin(GL_POINTS);
	glColor3f(1, 1, 1);

	for (int i = 0; i < i_text.size(); ++i)
	{
		int ci = (int(i_text[i]) - _fc) * _cw * _ch;
		for (int biy = 0; biy < _ch; ++biy)
		{
			for (int bix = 0; bix < _cw; ++bix)
			{
				if ( (_f_chars[ci + (_ch - biy - 1) * _cw + bix] == '1' && !selected) ||
					 (_f_chars[ci + (_ch - biy - 1) * _cw + bix] == '0' && selected) )
					glVertex3f(currx + bix * stepx, curry + biy * stepy, 0);
			}
			if(selected)
				glVertex3f(currx + _cw * stepx, curry + biy * stepy, 0);
		}
		currx += (_cw + 1 ) * stepx;
	}

	glEnd();

	// increate top-line
	_gtopline++;
}

#endif